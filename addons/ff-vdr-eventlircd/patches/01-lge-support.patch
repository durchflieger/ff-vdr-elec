diff --git a/configure.ac b/configure.ac
index 604b261..469a819 100644
--- a/configure.ac
+++ b/configure.ac
@@ -103,6 +103,7 @@ else
 fi
 
 PKG_CHECK_MODULES(LIBUDEV, [libudev >= 136])
+PKG_CHECK_MODULES(LIBLIRC, [lirc >= 0.10.1])
 
 AC_ARG_WITH(lircd-socket, AS_HELP_STRING([--with-lircd-socket=SOCKET], [lircd socket @<:@LOCALSTATEDIR/run/lirc/lircd@:>@]),
     [LIRCD_SOCKET="$withval"],
diff --git a/mkpatch.sh b/mkpatch.sh
new file mode 100644
index 0000000..92c2921
--- /dev/null
+++ b/mkpatch.sh
@@ -0,0 +1 @@
+git diff 3b753e91ae8c28dc34dd017a354d72b3c0715309 > ~/ff-vdr-elec/addons/ff-vdr-eventlircd/patches/01-lge-support.patch
diff --git a/src/.gitignore b/src/.gitignore
new file mode 100644
index 0000000..8ec376c
--- /dev/null
+++ b/src/.gitignore
@@ -0,0 +1,13 @@
+# ---
+# GIT ignore file
+#
+
+# VIM Editor files
+*~
+*.swp
+
+# Logfiles
+*.log
+
+# General backup files
+*.bak
diff --git a/src/Makefile.am b/src/Makefile.am
index 5829e40..b87674c 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1,7 +1,7 @@
 sbin_PROGRAMS = eventlircd
-eventlircd_SOURCES = main.c monitor.c monitor.h input.c input.h lircd.c lircd.h
-eventlircd_CFLAGS = $(AM_CFLAGS) $(LIBUDEV_CFLAGS) -DLIRCD_SOCKET=\"$(LIRCD_SOCKET)\" -DEVMAP_DIR=\"$(EVMAP_DIR)\"
-eventlircd_LDFLAGS = $(AM_CFLAGS) $(LIBUDEV_LIBS)
+eventlircd_SOURCES = main.c monitor.c monitor.h input.c input.h lircd.c lircd.h lge.c lge.h txir.c txir.h
+eventlircd_CFLAGS = $(AM_CFLAGS) $(LIBUDEV_CFLAGS) $(LIBLIRC_CFLAGS) -DLIRCD_SOCKET=\"$(LIRCD_SOCKET)\" -DEVMAP_DIR=\"$(EVMAP_DIR)\"
+eventlircd_LDFLAGS = $(AM_CFLAGS) $(LIBUDEV_LIBS) $(LIBLIRC_LIBS)
 
 nodist_eventlircd_SOURCES = event_name_to_code.h evkey_code_to_name.h evkey_type.h
 
diff --git a/src/input.c b/src/input.c
index 081af6c..00edaea 100644
--- a/src/input.c
+++ b/src/input.c
@@ -1163,7 +1163,7 @@ static bool input_device_event_is_key(struct input_device *device)
 	return true;
 }
 
-static int input_device_handler(void *id)
+static int input_device_handler(void *id, int UNUSED(ready), struct timeval* UNUSED(now))
 {
 	struct input_device *device;
 	struct input_event event;
@@ -2018,7 +2018,7 @@ static int input_device_add(struct udev_device *udev_device)
 	return 0;
 }
 
-static int input_handler(void* UNUSED(id))
+static int input_handler(void* UNUSED(id), int UNUSED(ready), struct timeval* UNUSED(now))
 {
 	struct udev_device *udev_device;
 	const char *action;
diff --git a/src/lge.c b/src/lge.c
new file mode 100644
index 0000000..ccd826e
--- /dev/null
+++ b/src/lge.c
@@ -0,0 +1,353 @@
+
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <ctype.h>
+#include <string.h>
+#include <unistd.h>
+#include <termios.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <sys/un.h>       /* XSI */
+#include <syslog.h>       /* XSI */
+
+#include "monitor.h"
+#include "lge.h"
+
+#ifdef UNUSED
+# error cannot define UNUSED because it is already defined
+#endif
+#if defined(__GNUC__)
+# define UNUSED(x) x __attribute__((unused))
+#else
+# define UNUSED(x) x
+#endif
+
+#define LGE_RX_START_TIMEOUT	6000000
+#define LGE_RX_TIMEOUT		1000000
+#define LGE_QUEUE_SIZE		128
+
+static int devfd = -1;
+
+static int lge_rx_state;
+static int lge_cmd_ok;
+static struct timeval lge_timeout;
+static unsigned int lge_cmd, lge_pause, lge_rx_value, lge_tx_value;
+static unsigned int lge_queue_in, lge_queue_out;
+static unsigned int lge_queue[LGE_QUEUE_SIZE];
+
+typedef struct {
+	char cmd1;
+	char cmd2;
+	unsigned int pause;
+} lge_cmd_t;
+
+#define LGE_NUM_CMDS	30
+static lge_cmd_t lge_cmd_tab[LGE_NUM_CMDS] = {
+    { 0,0,0 },
+    { 'K', 'A', 7500000 },
+    { 'K', 'C', 0 },
+    { 'K', 'D', 0 },
+    { 'K', 'E', 0 },
+    { 'K', 'F', 0 },
+    { 'K', 'G', 0 },
+    { 'K', 'H', 0 },
+    { 'K', 'I', 0 },
+    { 'K', 'J', 0 },
+    { 'K', 'K', 0 },
+    { 'K', 'L', 0 },
+    { 'K', 'M', 0 },
+    { 'K', 'N', 0 },
+    { 'K', 'Q', 0 },
+    { 'K', 'T', 0 },
+    { 'K', 'U', 0 },
+    { 'K', 'V', 0 },
+    { 'K', 'W', 0 },
+    { 'K', '$', 0 },
+    { 'K', 'Z', 0 },
+    { 0,0,0 },
+    { 0,0,0 },
+    { 0,0,0 },
+    { 0,0,0 },
+    { 0,0,0 },
+    { 0,0,0 },
+    { 'M', 'C', 0 },
+    { 'X', 'B', 0 },
+    { 'X', 'Y', 0 }
+};
+
+int lge_exit(void) {
+	if (devfd != -1) {
+		if (monitor_client_remove(devfd) != 0)
+			return -1;
+
+		if (close(devfd) == -1) {
+			syslog(LOG_ERR, "closing serial port failed: %s\n", strerror(errno));
+			return -1;
+		}
+		devfd = -1;
+	}
+	return 0;
+}
+
+static void set_lge_timeout(struct timeval *now, unsigned int pause) {
+	struct timeval p;
+	p.tv_sec = pause / 1000000;
+	p.tv_usec = pause % 1000000;
+	timeradd(now, &p, &lge_timeout);
+	monitor_timeout(devfd, &p);
+    	syslog(LOG_DEBUG, "set lge timeout: %d\n", pause);
+}
+
+static int send_lge_telegram(struct timeval *now, unsigned int value)
+{
+	char msg[12];
+	snprintf(msg, sizeof(msg), "%c%c 00 %02X\r", lge_cmd_tab[lge_cmd].cmd1, lge_cmd_tab[lge_cmd].cmd2, value);
+	if (write(devfd, msg, 9) == (ssize_t)-1) {
+    		syslog(LOG_ERR, "writing data to serial port failed: %s\n", strerror(errno));
+    		return -1;
+	}
+    	syslog(LOG_DEBUG, "send lge data: '%s'\n", msg);
+
+		// Prepare receiver for reply telegram
+	lge_rx_state = 1;
+	lge_cmd_ok = 0;
+	set_lge_timeout(now, LGE_RX_START_TIMEOUT);
+
+	return 0;
+}
+
+static int send_lge_cmd(struct timeval *now)
+{
+	unsigned int code;
+	struct timeval t;
+
+	if (lge_rx_state != 0 || lge_queue_in == lge_queue_out)
+		return 0;
+
+	code = lge_queue[lge_queue_out];
+	lge_queue_out = (lge_queue_out + 1) % LGE_QUEUE_SIZE;
+
+	if (code == 0) {
+		monitor_sigterm_handler(0);
+		return 0;
+	}
+
+	lge_cmd = code >> 8;
+	lge_tx_value = code & 0x0FF;
+	lge_pause = lge_cmd_tab[lge_cmd].pause;
+
+	if (now == NULL) {
+		now = &t;
+		if (monitor_now(now) < 0)
+			return -1;
+	}
+
+	return send_lge_telegram(now, (lge_pause > 0) ? 0x0FF : lge_tx_value);
+}
+
+static void process_lge_reply(char c)
+{
+	int state = lge_rx_state;
+
+	if (state == 1) {
+		if (c == lge_cmd_tab[lge_cmd].cmd2)
+			state = 2;	// Start of telegram
+	} else if (state == 6) {
+		if (c == 'N' || c == 'O')
+			state = 7;
+		else
+			state = 1;
+	} else if (state == 7) {
+		if (c == 'G') {
+			lge_cmd_ok = 0;
+			state = 8;
+		} else if (c == 'K') {
+			lge_cmd_ok = 1;
+			state = 8;
+		} else
+			state = 1;
+	} else if (state == 8) {
+		if (c >= '0' && c <= '9') {
+			lge_rx_value = (c - '0') << 4;
+			state = 9;
+		} else if (c >= 'A' && c <= 'F') {
+			lge_rx_value = (c + 10 - 'A') << 4;
+			state = 9;
+		} else
+			state = 1;
+	} else if (state == 9) {
+		if (c >= '0' && c <= '9') {
+			lge_rx_value |= (c - '0');
+			state = 10;
+		} else if (c >= 'A' && c <= 'F') {
+			lge_rx_value |= (c + 10 - 'A');
+			state = 10;
+		} else
+			state = 1;
+	} else if (state == 12) {
+		state = 0;	// end of telegram
+	} else if (state) {
+		++state;
+	}
+
+	lge_rx_state = state;
+}
+
+static int lge_handler(void* UNUSED(id), int ready, struct timeval *now) {
+	char msg[100];
+	ssize_t n, i;
+	struct timeval pause;
+
+	if (ready) {
+		n = read(devfd, &msg, sizeof(msg)-1);
+		if (n == (ssize_t)-1) {
+    			syslog(LOG_ERR, "reading data from serial port failed: %s\n", strerror(errno));
+    			return -1;
+		}
+		msg[n] = 0;
+    		syslog(LOG_DEBUG, "read lge data: '%s'\n", msg);
+
+		for (i = 0; i < n; ++i)
+			process_lge_reply(msg[i]);
+
+		if (lge_rx_state > 0) {
+			set_lge_timeout(now, LGE_RX_TIMEOUT);
+			return 0;
+		}
+
+		if (!lge_cmd_ok) {
+    			syslog(LOG_ERR, "lge command failed: %02X\n", lge_cmd);
+			lge_queue_in = lge_queue_out = 0;
+			return 0;
+		}
+
+    		syslog(LOG_DEBUG, "lge rx value: %02X\n", lge_rx_value);
+
+		if (lge_pause > 0) {
+			if (lge_tx_value != lge_rx_value) {
+				return send_lge_telegram(now, lge_tx_value);
+			}
+			set_lge_timeout(now, lge_pause);
+			return 0;
+		}
+
+		return send_lge_cmd(now);
+	}
+
+	if (lge_rx_state > 0 || lge_pause > 0) {
+		if (!timercmp(now, &lge_timeout, <)) {
+			if (lge_rx_state > 0) {
+    				syslog(LOG_ERR, "lge command timeout: %02X\n", lge_cmd);
+				lge_rx_state = 0;
+				lge_pause = 0;
+				lge_queue_in = lge_queue_out = 0;
+				return 0;
+			}
+			lge_pause = 0;
+			return send_lge_cmd(now);
+		}
+		timersub(&lge_timeout, now, &pause);
+		monitor_timeout(devfd, &pause);
+	}
+
+	return 0;
+}
+
+int lge_push(unsigned int code) {
+	unsigned int i;
+
+	i = (lge_queue_in + 1) % LGE_QUEUE_SIZE;
+	if (i == lge_queue_out) {
+    		syslog(LOG_ERR, "lge command queue overflow\n");
+    		return -1;
+	}
+
+	if (code == 0 && lge_rx_state == 0) {
+    		syslog(LOG_ERR, "illegal empty lge off command sequence\n");
+    		return -1;
+	}
+
+	lge_queue[lge_queue_in] = code;
+	lge_queue_in = i;
+
+	return 0;
+}
+
+int lge_send(const char *seq, struct timeval *now) {
+	char *s, *p;
+	char buf[100];
+	unsigned int code, i;
+
+	if (seq != NULL && devfd != -1) {
+		s = strtok_r(strncpy(buf, seq, sizeof(buf)), " ,", &p);
+		while (s != NULL) {
+			if (sscanf(s, "%x", &code) != 1) {
+    				syslog(LOG_ERR, "illegal lge code: %s\n", s);
+    				return -1;
+			}
+
+			i = code >> 8;
+			if (i >= LGE_NUM_CMDS || lge_cmd_tab[i].cmd1 == 0) {
+    				syslog(LOG_ERR, "illegal lge command: %s\n", s);
+    				return -1;
+			}
+
+			if (lge_push(code) < 0)
+				return -1;
+
+			s = strtok_r(NULL, " ,", &p);
+		}
+	}
+	return send_lge_cmd(now);
+}
+
+int lge_init(const char *devname, int retry) {
+	struct termios tio;
+	int flags;
+
+	lge_rx_state = 0;
+	lge_pause = 0;
+	lge_queue_in = lge_queue_out = 0;
+	timerclear(&lge_timeout);
+
+	for (;;) {
+		devfd = open(devname, O_RDWR|O_NOCTTY);
+		if (devfd != -1 || retry <= 0)
+			break;
+		if (usleep(100000) == -1)
+			return -1;
+		--retry;
+	}
+	if (devfd == -1) {
+		syslog(LOG_ERR, "could not open serial port device %s: %s\n", devname, strerror(errno));
+		return -1;
+	}
+
+	if (tcgetattr(devfd, &tio) == -1) {
+		syslog(LOG_ERR, "getting configuration of serial port failed: %s\n", strerror(errno));
+		lge_exit();
+		return -1;
+	}
+	cfmakeraw(&tio);
+	tio.c_cflag |= (CS8 | CLOCAL | CREAD);
+	cfsetspeed(&tio, B9600);
+	tio.c_cc[VMIN] = 1;
+	tio.c_cc[VTIME] = 0;
+	if (tcsetattr(devfd, TCSANOW, &tio) == -1) {
+		syslog(LOG_ERR, "setting configuration of serial port failed: %s\n", strerror(errno));
+		lge_exit();
+		return -1;
+	}
+
+	tcflush(devfd, TCIOFLUSH);
+
+	flags = fcntl(devfd, F_GETFL);
+	fcntl(devfd, F_SETFL, flags | O_NONBLOCK);
+
+	if (monitor_client_add(devfd, &lge_handler, NULL) != 0)
+		return -1;
+
+	return 0;
+}
+
diff --git a/src/lge.h b/src/lge.h
new file mode 100644
index 0000000..7e77ff9
--- /dev/null
+++ b/src/lge.h
@@ -0,0 +1,11 @@
+#ifndef _LGE_H_
+#define _LGE_H_ 1
+
+#include <sys/time.h>
+
+int lge_exit(void);
+int lge_init(const char *devname, int retry);
+int lge_push(unsigned int code);
+int lge_send(const char *seq, struct timeval *now);
+
+#endif
diff --git a/src/lircd.c b/src/lircd.c
index cd198ad..fb37734 100644
--- a/src/lircd.c
+++ b/src/lircd.c
@@ -35,11 +35,16 @@
  */
 #include <linux/input.h>  /* */
 #include <linux/limits.h> /* */
+
+#include <lirc_client.h>
+
 /*
  * eventlircd headers.
  */
 #include "lircd.h"
 #include "monitor.h"
+#include "lge.h"
+#include "txir.h"
 
 /*
  * The lircd_handler does not use the id parameter, so we need to let gcc's
@@ -71,12 +76,14 @@ struct {
 	mode_t mode;
 	char *release_suffix;
 	struct lircd_client *client_list;
+	struct lirc_config *lirc_client_config;
 } eventlircd_lircd = {
 	.fd = -1,
 	.path = NULL,
 	.mode = 0,
 	.release_suffix = NULL,
-	.client_list = NULL
+	.client_list = NULL,
+	.lirc_client_config = NULL
 };
 
 static int lircd_client_add()
@@ -114,7 +121,7 @@ static int lircd_client_add()
 	return 0;
 }
 
-static int lircd_handler(void* UNUSED(id))
+static int lircd_handler(void* UNUSED(id), int UNUSED(ready), struct timeval* UNUSED(now))
 {
 	if (lircd_client_add() != 0) {
 		return -1;
@@ -192,10 +199,15 @@ int lircd_exit()
 		eventlircd_lircd.path = NULL;
 	}
 
+	if (eventlircd_lircd.lirc_client_config != NULL) {
+		lirc_freeconfig(eventlircd_lircd.lirc_client_config);
+		eventlircd_lircd.lirc_client_config = NULL;
+	}
+
 	return return_code;
 }
 
-int lircd_init(const char *path, mode_t mode, const char *release_suffix)
+int lircd_init(const char *path, mode_t mode, const char *release_suffix, const char *lirc_client_config_file)
 {
 	struct sockaddr_un addr;
 
@@ -218,6 +230,11 @@ int lircd_init(const char *path, mode_t mode, const char *release_suffix)
 		return -1;
 	}
 
+    	if (lirc_client_config_file != NULL && lirc_readconfig_only(lirc_client_config_file, &eventlircd_lircd.lirc_client_config, NULL) == -1) {
+		syslog(LOG_ERR, "failed to read lirc config file %s\n", lirc_client_config_file);
+		return -1;
+    	}
+
 	if ((eventlircd_lircd.path = strndup(path, PATH_MAX)) == NULL) {
 		syslog(LOG_ERR,
 		       "failed to allocate memory for the lircd device %s: %s\n",
@@ -296,6 +313,8 @@ int lircd_send(const struct input_event *event, const char *name, unsigned int r
 	char message[1000];
 	int message_len;
 	struct lircd_client *client;
+	char *cmd, *prog;
+	int forward;
 
 	if (event == NULL) {
 		errno = EINVAL;
@@ -335,6 +354,37 @@ int lircd_send(const struct input_event *event, const char *name, unsigned int r
 	}
 
 	if (message_len > 0) {
+		if (eventlircd_lircd.lirc_client_config != NULL) {
+			syslog(LOG_DEBUG, "lircd message: %s", message);
+			forward = 0;
+			for (;;) {
+				cmd = prog = NULL;
+				if (lirc_code2charprog(eventlircd_lircd.lirc_client_config, message, &cmd, &prog) == -1) {
+					errno = EINVAL;
+					return -1;
+				}
+				if (cmd == NULL) {
+					break;
+				}
+				if (forward == 0) {
+					forward = 1;
+				}
+				if (prog != NULL) {
+					if (strcmp(prog, "forward") == 0) {
+						forward = 2;
+					} else if (strcmp(prog, "txir") == 0) {
+						if (txir_send(cmd) == -1)
+							return -1;
+					} else if (strcmp(prog, "lge") == 0) {
+						if (lge_send(cmd, NULL) == -1)
+							return -1;
+					}
+				}
+			}
+			if (forward == 1)
+				return 0;
+		}
+
 		for(client = eventlircd_lircd.client_list ; client != NULL ; client = client->next) {
 			if (write(client->fd, message, (size_t)message_len) != (ssize_t)message_len) {
 				if (lircd_client_close(client) != 0) {
diff --git a/src/lircd.h b/src/lircd.h
index 59edbd1..83f4650 100644
--- a/src/lircd.h
+++ b/src/lircd.h
@@ -28,7 +28,7 @@
  */
 #include <linux/input.h>  /* */
 
-int lircd_init(const char *path, mode_t mode, const char *release_suffix);
+int lircd_init(const char *path, mode_t mode, const char *release_suffix, const char *lirc_client_config_file);
 int lircd_exit();
 int lircd_send(const struct input_event *event, const char *name, unsigned int repeat_count, const char *remote);
 
diff --git a/src/main.c b/src/main.c
index 207ba92..519c3ce 100644
--- a/src/main.c
+++ b/src/main.c
@@ -42,6 +42,8 @@
 #include "input.h"
 #include "lircd.h"
 #include "monitor.h"
+#include "lge.h"
+#include "txir.h"
 
 int main(int argc,char **argv)
 {
@@ -56,6 +58,12 @@ int main(int argc,char **argv)
         {"mode",required_argument,NULL,'m'},
         {"repeat-filter",no_argument,NULL,'R'},
         {"release",required_argument,NULL,'r'},
+        {"lircrc",required_argument,NULL,'C'},
+        {"lge-port",required_argument,NULL,'L'},
+        {"lge-on",required_argument,NULL,0x100},
+        {"lge-off",required_argument,NULL,0x101},
+        {"lge-open-retry",required_argument,NULL,0x102},
+        {"txir",required_argument,NULL,'T'},
         {0, 0, 0, 0}
     };
     const char *progname = NULL;
@@ -67,12 +75,17 @@ int main(int argc,char **argv)
     bool input_repeat_filter = false;
     const char *lircd_release_suffix = NULL;
     int opt;
+    const char *lirc_client_config_file = NULL;
+    const char *lge_port = NULL, *lge_on = NULL, *lge_off = NULL;
+    int lge_open_retry = 0;
+    const char *txir = NULL;
+    int rc;
 
     for (progname = argv[0] ; strchr(progname, '/') != NULL ; progname = strchr(progname, '/') + 1);
 
     openlog(progname, LOG_CONS | LOG_PERROR | LOG_PID, LOG_DAEMON);
 
-    while((opt = getopt_long(argc, argv, "hVvfe:s:m:Rr:", longopts, NULL)) != -1)
+    while((opt = getopt_long(argc, argv, "hVvfe:s:m:Rr:C:L:T:", longopts, NULL)) != -1)
     {
         switch(opt)
         {
@@ -91,6 +104,12 @@ int main(int argc,char **argv)
 		fprintf(stdout, "    -R --repeat-filter     enable repeat filtering (default is '%s')\n",
                                                             input_repeat_filter ? "false" : "true");
 		fprintf(stdout, "    -r --release=<suffix>  generate key release events suffixed with <suffix>\n");
+		fprintf(stdout, "    -C --lircrc=<file>     lirc client config file\n");
+		fprintf(stdout, "    -L --lge-port=<path>   lge serial port device\n");
+		fprintf(stdout, "    --lge-on=<codes>       lge codes to switch tv on\n");
+		fprintf(stdout, "    --lge-off=<codes>      lge codes to switch tv off\n");
+		fprintf(stdout, "    --lge-open-retry=<n>   retry port open every 100ms\n");
+		fprintf(stdout, "    -T --txir=<path>       txir socket path\n");
                 exit(EX_OK);
                 break;
             case 'V':
@@ -124,6 +143,21 @@ int main(int argc,char **argv)
             case 'r':
                 lircd_release_suffix = optarg;
                 break;
+            case 'C':
+                lirc_client_config_file = optarg;
+                break;
+            case 'L':
+                lge_port = optarg;
+                break;
+            case 0x100:
+                lge_on = optarg;
+                break;
+            case 0x101:
+                lge_off = optarg;
+                break;
+            case 0x102:
+                lge_open_retry = atoi(optarg);
+                break;
             default:
                 fprintf(stderr, "error: unknown option: %c\n", opt);
                 exit(EX_USAGE);
@@ -156,7 +190,7 @@ int main(int argc,char **argv)
 
     /* Initialize the lircd socket before daemonizing in order to ensure that programs
        started after it damonizes will have an lircd socket with which to connect. */
-    if (lircd_init(lircd_socket_path, lircd_socket_mode, lircd_release_suffix) != 0)
+    if (lircd_init(lircd_socket_path, lircd_socket_mode, lircd_release_suffix, lirc_client_config_file) != 0)
     {
         monitor_exit();
         exit(EXIT_FAILURE);
@@ -172,30 +206,52 @@ int main(int argc,char **argv)
         }
     }
 
-    if (input_init(input_device_evmap_dir, input_repeat_filter) != 0)
-    {
-        monitor_exit();
-        lircd_exit();
-        exit(EXIT_FAILURE);
-    }
+    rc = 0;
 
-    monitor_run();
+    txir_init(txir);
 
-    if (input_exit() != 0)
-    {
-        monitor_exit();
-        lircd_exit();
-        exit(EXIT_FAILURE);
-    }
+    if (lge_port != NULL)
+	   rc = lge_init(lge_port, lge_open_retry);
 
-    if (lircd_exit() != 0)
-    {
-        monitor_exit();
-        exit(EXIT_FAILURE);
+    if (rc == 0)
+    	rc = input_init(input_device_evmap_dir, input_repeat_filter);
+
+    if (rc == 0 && lge_on != NULL)
+	rc = lge_send(lge_on, NULL);
+
+    if (rc == 0)
+   	rc = monitor_run();
+
+    if (rc == 0)
+	rc = input_exit();
+
+    if (rc == 0 && lge_off != NULL) {
+	rc = lge_send(lge_off, NULL);
+    	if (rc == 0)
+		rc = lge_push(0);
+    	if (rc == 0)
+   		rc = monitor_run();
     }
 
-    if (monitor_exit() != 0)
+    if (rc == 0)
+        rc = monitor_exit();
+
+    if (rc == 0)
+        rc = lircd_exit();
+
+    if (rc == 0)
+	rc = lge_exit();
+
+    if (rc == 0)
+	rc = txir_exit();
+
+    if (rc == -1)
     {
+	input_exit();
+        monitor_exit();
+        lircd_exit();
+	lge_exit();
+	txir_exit();
         exit(EXIT_FAILURE);
     }
 
diff --git a/src/monitor.c b/src/monitor.c
index 981e9f7..29a3f3f 100644
--- a/src/monitor.c
+++ b/src/monitor.c
@@ -38,8 +38,9 @@
 
 struct monitor_client {
 	int fd;
-	int (*handler)(void *id);
+	int (*handler)(void *id, int ready, struct timeval *now);
 	void *id;
+	struct timeval timeout;
 	struct monitor_client *next;
 };
 
@@ -62,6 +63,7 @@ static int monitor_client_close(struct monitor_client *client)
 	client->fd = -1;
 	client->handler = NULL;
 	client->id = NULL;
+	timerclear(&client->timeout);
 
 	return 0;
 }
@@ -112,7 +114,7 @@ int monitor_client_remove(int fd)
 	return return_code;
 }
 
-int monitor_client_add(int fd, int (*handler)(void *id), void *id)
+int monitor_client_add(int fd, int (*handler)(void *id, int ready, struct timeval *now), void *id)
 {
 	struct monitor_client *client;
 
@@ -135,6 +137,7 @@ int monitor_client_add(int fd, int (*handler)(void *id), void *id)
 	client->fd = fd;
 	client->handler = handler;
 	client->id = id;
+	timerclear(&client->timeout);
 
 	client->next = eventlircd_monitor.client_list;
 	eventlircd_monitor.client_list = client;
@@ -164,11 +167,22 @@ int monitor_exit()
 int monitor_init()
 {
 	eventlircd_monitor.client_list = NULL;
-
 	return 0;
 }
 
-static void monitor_sigterm_handler(int signal)
+void monitor_timeout(int fd, struct timeval *timeout) {
+	struct monitor_client *client;
+
+	for (client = eventlircd_monitor.client_list ; client != NULL ; client = client->next) {
+		if (client->fd == fd) {
+			if (!timerisset(&client->timeout) || timercmp(&client->timeout, timeout, >))
+				client->timeout = *timeout;
+			break;
+		}
+	}
+}
+
+void monitor_sigterm_handler(int signal)
 {
 	if (monitor_sigterm_active == true) {
 		return;
@@ -177,13 +191,23 @@ static void monitor_sigterm_handler(int signal)
 	monitor_sigterm_signal = signal;
 }
 
+int monitor_now(struct timeval *time) {
+	if (gettimeofday(time, NULL) == -1) {
+    		syslog(LOG_ERR, "getting time of day failed: %s\n", strerror(errno));
+    		return -1;
+	}
+	return 0;
+}
+
 int monitor_run()
 {
 	struct sigaction signal_action;
 	struct monitor_client *client;
 	fd_set fdset;
 	int nfds;
+	struct timeval timeout, now;
 
+	monitor_sigterm_active = false;
 	signal_action.sa_handler = monitor_sigterm_handler;
 	sigfillset(&signal_action.sa_mask);
 	signal_action.sa_flags=SA_RESTART;
@@ -192,16 +216,12 @@ int monitor_run()
 
 	while (true) {
 		if (monitor_sigterm_active == true) {
-			input_exit();
-			lircd_exit();
-			monitor_exit();
-			signal(monitor_sigterm_signal, SIG_DFL);
-			raise(monitor_sigterm_signal);
-			return 0;
+			break;
 		}
 
 		FD_ZERO(&fdset);
 		nfds = 0;
+		timerclear(&timeout);
 		for (client = eventlircd_monitor.client_list ; client != NULL ; client = client->next) {
 			if (client->fd < 0) {
 				continue;
@@ -210,24 +230,29 @@ int monitor_run()
 			if (nfds < client->fd) {
 				nfds = client->fd;
 			}
+			if (timerisset(&client->timeout) && (!timerisset(&timeout) || timercmp(&timeout, &client->timeout, >)))
+				timeout = client->timeout;
 		}
 		nfds++;
 
-		if (select(nfds, &fdset, NULL, NULL, NULL) < 0) {
+		if (select(nfds, &fdset, NULL, NULL, timerisset(&timeout) ? &timeout : NULL) < 0) {
 			if (errno == EINTR) {
 				continue;
 			}
 			return -1;
 		}
 
+		if (monitor_now(&now) < 0)
+			return -1;
+
 		for (client = eventlircd_monitor.client_list ; client != NULL ; client = client->next) {
 			if (client->fd == -1) {
 				continue;
 			}
-			if (FD_ISSET(client->fd, &fdset) == 0) {
-				continue;
+			if (FD_ISSET(client->fd, &fdset) || timerisset(&client->timeout)) {
+				timerclear(&client->timeout);
+				client->handler(client->id, FD_ISSET(client->fd, &fdset), &now);
 			}
-			client->handler(client->id);
 		}
 	}
 	return 0;
diff --git a/src/monitor.h b/src/monitor.h
index 56f1d46..9fc7948 100644
--- a/src/monitor.h
+++ b/src/monitor.h
@@ -19,10 +19,15 @@
 #ifndef _EVENTLIRCD_MONITOR_H_
 #define _EVENTLIRCD_MONITOR_H_ 1
 
+#include <sys/time.h>
+
 int monitor_init();
 int monitor_exit();
-int monitor_client_add(int fd, int (*handler)(void *id), void *id);
+int monitor_client_add(int fd, int (*handler)(void *id, int ready, struct timeval *now), void *id);
 int monitor_client_remove(int fd);
+void monitor_timeout(int fd, struct timeval *timeout);
+int monitor_now(struct timeval *time);
+void monitor_sigterm_handler(int signal);
 int monitor_run();
 
 #endif
diff --git a/src/txir.c b/src/txir.c
new file mode 100644
index 0000000..3bd3058
--- /dev/null
+++ b/src/txir.c
@@ -0,0 +1,87 @@
+//
+#include <stdio.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <ctype.h>
+#include <string.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <sys/un.h>       /* XSI */
+#include <syslog.h>       /* XSI */
+
+#include "monitor.h"
+#include "txir.h"
+
+#ifdef UNUSED
+# error cannot define UNUSED because it is already defined
+#endif
+#if defined(__GNUC__)
+# define UNUSED(x) x __attribute__((unused))
+#else
+# define UNUSED(x) x
+#endif
+
+static const char *txir_socket_path;
+static int txir_fd = -1;
+
+void txir_init(const char *path)
+{
+	txir_socket_path = path;
+}
+
+int txir_exit(void)
+{
+	if (txir_fd != -1) {
+		if (monitor_client_remove(txir_fd) != 0)
+			return -1;
+
+		if (close(txir_fd) == -1) {
+			syslog(LOG_ERR, "closing txir socket failed: %s\n", strerror(errno));
+			return -1;
+		}
+		txir_fd = -1;
+	}
+	return 0;
+}
+
+static int txir_handler(void* UNUSED(id), int ready, struct timeval* UNUSED(now))
+{
+	if (ready)
+	{
+		char msg[256];
+		ssize_t n = read(txir_fd, &msg, sizeof(msg) - 1);
+		if (n == (ssize_t)-1) {
+    	syslog(LOG_ERR, "reading data from txir socket failed: %s\n", strerror(errno));
+    	return -1;
+		}
+	}
+	return 0;
+}
+
+int txir_send(const char *cmd)
+{
+	if (txir_socket_path == NULL)
+		return 0;
+
+	if (txir_fd == -1)
+	{
+		txir_fd = open(txir_socket_path, O_RDWR|O_NONBLOCK);
+		if (txir_fd == -1)
+		{
+			syslog(LOG_ERR, "could not open txir socket %s: %s\n", txir_socket_path, strerror(errno));
+			return -1;
+		}
+		if (monitor_client_add(txir_fd, &txir_handler, NULL) != 0)
+			return -1;
+	}
+
+	char buf[256];
+	ssize_t n = snprintf(buf, sizeof(buf), "%s\n", cmd);
+	if (write(txir_fd, buf, n) != n)
+	{
+		syslog(LOG_ERR, "write to txir socket failed: %s\n", strerror(errno));
+		return -1;
+	}
+	return 0;
+}
diff --git a/src/txir.h b/src/txir.h
new file mode 100644
index 0000000..213d59f
--- /dev/null
+++ b/src/txir.h
@@ -0,0 +1,10 @@
+#ifndef _TXIR_H_
+#define _TXIR_H_ 1
+
+#include <sys/time.h>
+
+void txir_init(const char *path);
+int txir_exit(void);
+int txir_send(const char *cmd);
+
+#endif
diff --git a/test/lgeemu.sh b/test/lgeemu.sh
new file mode 100644
index 0000000..a49db78
--- /dev/null
+++ b/test/lgeemu.sh
@@ -0,0 +1,22 @@
+#!/bin/sh
+ka="00"
+while read -N 9 m ; do
+	case "$m" in
+		KA\ 00\ FF*)
+		       echo -n "Axxxx"
+		       sleep 0.5
+		       echo "OK${ka}xx"
+		       ;;
+		KA\ 00\ 01*)
+		       echo "AxxxxOK01xx"
+		       ka="01"
+		       ;;
+		KA\ 00\ 00*)
+		       echo "AxxxxOK00xx"
+		       ka="00"
+		       ;;
+		KL*)
+			echo "LxxxxOKFAxx"
+			;;
+	esac
+done
diff --git a/test/lircrc b/test/lircrc
new file mode 100644
index 0000000..9804936
--- /dev/null
+++ b/test/lircrc
@@ -0,0 +1,14 @@
+begin
+  remote = devinput
+  button = VOLUME_UP
+  prog   = lge
+  repeat = 1
+  config = 1B02
+end
+begin
+  remote = devinput
+  button = VOLUME_DOWN
+  prog   = lge
+  repeat = 1
+  config = 1B03
+end
